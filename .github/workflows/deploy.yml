name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Test
    uses: ./.github/workflows/test.yml

  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout build repo
        uses: actions/checkout@v2
        with:
          repository: credmark/models-py-build
          path: ./build-files
          ssh-key: ${{ secrets.MODELS_PY_BUILD_DEPLOY_KEY }}

      - name: Copy build files
        run: ./build-files/scripts/copy-build-files.sh .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build image to Amazon ECR and deploy lambda
        id: build-deploy-lambda
        env:
          DOCKER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DOCKER_REPOSITORY: ${{ github.event.repository.name }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Build the lambda import and create/update lambda
          # Name of the repo is the name of the lambda

          ./build-files/scripts/deploy-lambda.sh $DOCKER_REPOSITORY

      - name: Reload Runner Service
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ./build-files/scripts/restart-runner-service.sh

      - name: Log out of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Copy http build files
        run: |
          # Delete Dockerfile for the previous build
          # TODO: Delete the next line once AWS ECR docker repository workflow steps are deleted
          rm -rf ./Dockerfile

          ./build-files/scripts/copy-http-build-files.sh .

      - name: Build and Push to Github container registry
        id: build-tag-push-image-new-registry
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_REGISTRY: ${{secrets.DOCKER_REGISTRY}}
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_IMAGE: ${{ github.event.repository.name }}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
          DOCKER_IMAGE_URL: ${{env.DOCKER_REGISTRY}}/${{env.DOCKER_USERNAME}}/${{env.DOCKER_IMAGE}}
        run: |
          DOCKER_IMAGE_URL=$DOCKER_REGISTRY/$DOCKER_USERNAME/$DOCKER_IMAGE
          # Build image
          docker build --build-arg GITHUB_TOKEN=$GITHUB_TOKEN -t $DOCKER_IMAGE_URL:$IMAGE_TAG .

          # Login to github registry
          echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME --password-stdin

          # Tag image as latest
          docker tag $DOCKER_IMAGE_URL:$IMAGE_TAG $DOCKER_IMAGE_URL:latest

          # Push images
          echo "Pushing image to New Container registry..."
          docker push $DOCKER_IMAGE_URL:$IMAGE_TAG
          docker push $DOCKER_IMAGE_URL:latest
          echo "::set-output name=image::$DOCKER_IMAGE_URL:$IMAGE_TAG"

          # Logout
          docker logout $DOCKER_REGISTRY

